<%- include('partials/header', { currentPage: 'downloads', pageTitle: 'Downloads' }) %>
        
        <div class="stats">
            <strong><%= downloadedFiles.length %></strong> download groups found
        </div>
        
        <div class="downloads-section">
            <% if (downloadedFiles.length === 0) { %>
                <div class="empty-downloads">No downloaded files found</div>
            <% } else { %>
                <% downloadedFiles.forEach(function(group) { %>
                    <div class="download-group">
                        <div class="download-title"><%= group.baseName %></div>
                        
                        <% if (group.video) { %>
                            <div class="file-item">
                                <div class="file-info">
                                    <div class="file-name">
                                        <span class="file-type-badge video-badge">VIDEO</span>
                                        <%= group.video.name %>
                                    </div>
                                    <div class="file-details">
                                        Size: <%= formatFileSize(group.video.size) %> | 
                                        Modified: <%= group.video.modified.toLocaleString() %>
                                    </div>
                                </div>
                                <div class="file-actions">
                                    <a href="/download/<%= encodeURIComponent(group.video.name) %>" class="btn download-btn">Download</a>
                                    <button class="btn delete-btn" data-filename="<%= group.video.name %>">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        <% } %>
                        
                        <% group.subtitles.forEach(function(subtitle) { %>
                            <div class="file-item">
                                <div class="file-info">
                                    <div class="file-name">
                                        <span class="file-type-badge subtitle-badge">SUBTITLE</span>
                                        <%= subtitle.name %>
                                    </div>
                                    <div class="file-details">
                                        Size: <%= formatFileSize(subtitle.size) %> | 
                                        Modified: <%= subtitle.modified.toLocaleString() %>
                                    </div>
                                </div>
                                <div class="file-actions">
                                    <a href="/download/<%= encodeURIComponent(subtitle.name) %>" class="btn download-btn">Download</a>
                                    <button class="btn delete-btn" data-filename="<%= subtitle.name %>">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        <% }) %>
                        
                        <% if (group.other && group.other.length > 0) { %>
                            <% group.other.forEach(function(file) { %>
                                <div class="file-item">
                                    <div class="file-info">
                                        <div class="file-name">
                                            <%= file.name %>
                                        </div>
                                        <div class="file-details">
                                            Size: <%= formatFileSize(file.size) %> | 
                                            Modified: <%= file.modified.toLocaleString() %>
                                        </div>
                                    </div>
                                    <div class="file-actions">
                                        <a href="/download/<%= encodeURIComponent(file.name) %>" class="btn download-btn">Download</a>
                                        <button class="btn delete-btn" data-filename="<%= file.name %>">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            <% }) %>
                        <% } %>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay">
        <div class="modal">
            <h3>Confirm Delete</h3>
            <p>Are you sure you want to delete this file? This action cannot be undone.</p>
            <div id="modalFilename" class="modal-filename"></div>
            <div class="modal-buttons">
                <button class="modal-btn btn-cancel" onclick="hideDeleteModal()">Cancel</button>
                <button class="modal-btn btn-delete" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>
    
    <!-- Hidden form for delete submission -->
    <form id="deleteForm" action="/file/delete" method="POST" style="display: none;">
        <input type="hidden" id="deleteFilename" name="filename" value="">
    </form>
    
    <script>
        let currentDeleteFilename = null;
        
        // Event delegation for delete buttons
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('click', function(e) {
                if (e.target && e.target.classList.contains('delete-btn')) {
                    const filename = e.target.dataset.filename;
                    showDeleteModal(filename);
                }
            });
        });
        
        function showDeleteModal(filename) {
            currentDeleteFilename = filename;
            document.getElementById('modalFilename').textContent = filename;
            document.getElementById('deleteModal').style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        }
        
        function hideDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            currentDeleteFilename = null;
        }
        
        function confirmDelete() {
            if (currentDeleteFilename) {
                document.getElementById('deleteFilename').value = currentDeleteFilename;
                document.getElementById('deleteForm').submit();
            }
        }
        
        // Close modal when clicking outside of it
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideDeleteModal();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('deleteModal').style.display === 'block') {
                hideDeleteModal();
            }
        });
        
        // Notification checking functionality
        function checkForNotifications() {
            fetch('/api/state')
                .then(response => response.json())
                .then(data => {
                    if (data.notifications && data.notifications.length > 0) {
                        showCompletionNotification(data.notifications[0]);
                    }
                })
                .catch(error => {
                    console.error('Error checking notifications:', error);
                });
        }
        
        function showCompletionNotification(notification) {
            const existingFlash = document.querySelector('[data-flash-message]');
            if (existingFlash) {
                return;
            }
            
            const flashMessage = document.createElement('div');
            flashMessage.className = 'flash-message success';
            flashMessage.setAttribute('data-flash-message', '');
            flashMessage.innerHTML = `
                <span class="flash-content">${notification.message}</span>
                <button class="flash-dismiss" aria-label="Dismiss message">&times;</button>
            `;
            
            const header = document.querySelector('.header');
            header.parentNode.insertBefore(flashMessage, header.nextSibling);
            
            const dismissBtn = flashMessage.querySelector('.flash-dismiss');
            dismissBtn.addEventListener('click', function() {
                dismissCompletionNotification(notification.timestamp, flashMessage);
            });
            
            setTimeout(() => {
                dismissCompletionNotification(notification.timestamp, flashMessage);
            }, 5000);
            
            const escapeHandler = function(e) {
                if (e.key === 'Escape') {
                    dismissCompletionNotification(notification.timestamp, flashMessage);
                    document.removeEventListener('keydown', escapeHandler);
                }
            };
            document.addEventListener('keydown', escapeHandler);
        }
        
        function dismissCompletionNotification(notificationId, flashElement) {
            if (!flashElement || flashElement.classList.contains('dismissing')) return;
            
            flashElement.classList.add('dismissing');
            setTimeout(() => {
                if (flashElement.parentElement) {
                    flashElement.parentElement.removeChild(flashElement);
                }
            }, 300);
            
            fetch('/api/notifications/dismiss', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ notificationId: notificationId })
            }).catch(error => {
                console.error('Error dismissing notification:', error);
            });
        }
        
        // Start checking for notifications
        document.addEventListener('DOMContentLoaded', function() {
            checkForNotifications();
            setInterval(checkForNotifications, 3000); // Check every 3 seconds
        });
    </script>
</body>
</html>