<%- include('partials/header', { currentPage: 'settings', pageTitle: 'Settings' }) %>
        
        <div class="settings-section">
            <h2>Download Settings</h2>
            
            <form id="settingsForm" data-auto-save="true">
                <div class="settings-group">
                    <h3>Video Quality</h3>
                    <div class="form-group">
                        <label for="videoQuality">Maximum Resolution:</label>
                        <select id="videoQuality" name="videoQuality" data-auto-save="true">
                            <% options.videoQualities.forEach(function(option) { %>
                                <option value="<%= option.value %>" <%= settings.videoQuality === option.value ? 'selected' : '' %>>
                                    <%= option.label %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </div>
                
                <div class="settings-group">
                    <h3>Subtitles</h3>
                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="subtitles" data-auto-save="true" <%= settings.subtitles ? 'checked' : '' %>>
                            <span class="checkmark"></span>
                            Download subtitles
                        </label>
                    </div>
                    
                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="autoSubs" data-auto-save="true" <%= settings.autoSubs ? 'checked' : '' %>>
                            <span class="checkmark"></span>
                            Download auto-generated subtitles
                        </label>
                    </div>
                    
                    <div class="form-group">
                        <label for="subLanguage">Subtitle Language:</label>
                        <select id="subLanguage" name="subLanguage" data-auto-save="true">
                            <% options.subLanguages.forEach(function(option) { %>
                                <option value="<%= option.value %>" <%= settings.subLanguage === option.value ? 'selected' : '' %>>
                                    <%= option.label %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </div>
                
                <div class="settings-group">
                    <h3>Download Speed</h3>
                    <div class="form-group">
                        <label for="rateLimit">Rate Limit:</label>
                        <select id="rateLimit" name="rateLimit" data-auto-save="true">
                            <% options.rateLimits.forEach(function(option) { %>
                                <option value="<%= option.value %>" <%= settings.rateLimit === option.value ? 'selected' : '' %>>
                                    <%= option.label %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </div>
                
                <div class="form-actions">
                    <!-- Auto-save feedback provided by field glow effect -->
                </div>
            </form>
        </div>
        
        <div class="attribution-panel">
            SVG symbols from <a href="https://lucide.dev" target="_blank" rel="noopener noreferrer">Lucide</a>, licensed under the <a href="https://lucide.dev/license" target="_blank" rel="noopener noreferrer">ISC License</a>.
        </div>
    </div>
    
    <script src="/js/websocket.js"></script>
    <script>
        // Auto-save functionality
        let saveTimeout;
        let isSaving = false;
        
        function debounceAutoSave(callback, delay) {
            clearTimeout(saveTimeout);
            saveTimeout = setTimeout(callback, delay);
        }
        
        function showSaveStatus(changedField, isError = false) {
            if (!changedField) return;
            
            // Remove any existing glow classes
            changedField.classList.remove('auto-save-glow', 'auto-save-error');
            
            // Add the appropriate glow class
            const glowClass = isError ? 'auto-save-error' : 'auto-save-glow';
            changedField.classList.add(glowClass);
            
            // Remove the glow class after animation completes
            setTimeout(() => {
                changedField.classList.remove(glowClass);
            }, 1500);
        }
        
        function getFormData() {
            const form = document.getElementById('settingsForm');
            const formData = new FormData(form);
            const data = {};
            
            data.videoQuality = formData.get('videoQuality');
            data.subtitles = formData.get('subtitles') === 'on';
            data.autoSubs = formData.get('autoSubs') === 'on';
            data.subLanguage = formData.get('subLanguage');
            data.rateLimit = formData.get('rateLimit');
            
            return data;
        }
        
        function saveSettings(changedField) {
            if (isSaving) return;
            
            isSaving = true;
            
            const data = getFormData();
            
            fetch('/api/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to save settings');
                }
                return response.json();
            })
            .then(result => {
                showSaveStatus(changedField, false);
                isSaving = false;
            })
            .catch(error => {
                console.error('Error saving settings:', error);
                showSaveStatus(changedField, true);
                isSaving = false;
            });
        }
        
        function initAutoSave() {
            const form = document.getElementById('settingsForm');
            const autoSaveFields = form.querySelectorAll('[data-auto-save="true"]');
            
            autoSaveFields.forEach(field => {
                field.addEventListener('change', function() {
                    const changedField = this;
                    debounceAutoSave(() => saveSettings(changedField), 300);
                });
            });
        }
        
        // Notification checking functionality
        function checkForNotifications() {
            fetch('/api/state')
                .then(response => response.json())
                .then(data => {
                    if (data.notifications && data.notifications.length > 0) {
                        const notification = data.notifications[0];
                        // Only show if we haven't shown this notification before
                        if (!shownNotifications.has(notification.timestamp)) {
                            shownNotifications.add(notification.timestamp);
                            showCompletionNotification(notification);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error checking notifications:', error);
                });
        }
        
        function showCompletionNotification(notification) {
            showToast('success', notification.message, 5000, notification.timestamp);
        }
        
        // Toast notification system
        let toastQueue = [];
        let toastIdCounter = 0;
        let shownNotifications = new Set();
        
        function showToast(type, message, duration = 5000, notificationId = null) {
            const toast = {
                id: ++toastIdCounter,
                type: type,
                message: message,
                duration: duration,
                notificationId: notificationId,
                element: null,
                timeout: null,
                progressInterval: null,
                isHovered: false
            };
            
            toastQueue.push(toast);
            displayToast(toast);
        }
        
        function displayToast(toast) {
            const container = document.getElementById('toast-container');
            if (!container) return;
            
            // Create toast element
            const toastElement = document.createElement('div');
            toastElement.className = `toast-notification ${toast.type}`;
            toastElement.dataset.toastId = toast.id;
            toastElement.innerHTML = `
                <span class="toast-content">${escapeHtml(toast.message)}</span>
                <button class="toast-dismiss" aria-label="Dismiss notification">&times;</button>
                <div class="toast-progress"></div>
            `;
            
            toast.element = toastElement;
            container.appendChild(toastElement);
            
            // Set up dismiss functionality
            const dismissBtn = toastElement.querySelector('.toast-dismiss');
            dismissBtn.addEventListener('click', () => dismissToast(toast));
            
            // Set up hover pause functionality
            toastElement.addEventListener('mouseenter', () => {
                toast.isHovered = true;
                toastElement.classList.add('paused');
                if (toast.timeout) clearTimeout(toast.timeout);
                if (toast.progressInterval) clearInterval(toast.progressInterval);
            });
            
            toastElement.addEventListener('mouseleave', () => {
                toast.isHovered = false;
                toastElement.classList.remove('paused');
                startToastTimer(toast);
            });
            
            // Start auto-dismiss timer
            startToastTimer(toast);
        }
        
        function startToastTimer(toast) {
            if (toast.isHovered) return;
            
            const progressBar = toast.element.querySelector('.toast-progress');
            let progress = 0;
            const interval = 50;
            const increment = (interval / toast.duration) * 100;
            
            toast.progressInterval = setInterval(() => {
                progress += increment;
                progressBar.style.width = progress + '%';
                
                if (progress >= 100) {
                    clearInterval(toast.progressInterval);
                    dismissToast(toast);
                }
            }, interval);
        }
        
        function dismissToast(toast) {
            if (!toast.element || toast.element.classList.contains('dismissing')) return;
            
            // Clear timers
            if (toast.timeout) clearTimeout(toast.timeout);
            if (toast.progressInterval) clearInterval(toast.progressInterval);
            
            // Animate out
            toast.element.classList.add('dismissing');
            setTimeout(() => {
                if (toast.element.parentElement) {
                    toast.element.parentElement.removeChild(toast.element);
                }
            }, 300);
            
            // Remove from queue
            const index = toastQueue.indexOf(toast);
            if (index > -1) {
                toastQueue.splice(index, 1);
            }
            
            // Tell server to remove the notification if it has a notification ID
            if (toast.notificationId) {
                // Remove from shown notifications set
                shownNotifications.delete(toast.notificationId);
                
                fetch('/api/notifications/dismiss', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ notificationId: toast.notificationId })
                }).catch(error => {
                    console.error('Error dismissing notification:', error);
                });
            }
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            initAutoSave();
            
            // Initial notification check
            checkForNotifications();
            
            // Set up WebSocket-triggered notification checks
            if (window.wsClient) {
                window.wsClient.addListener(checkForNotifications);
            } else {
                // Fallback to polling if WebSocket client is not available
                console.warn('WebSocket client not available, falling back to polling');
                setInterval(checkForNotifications, 3000);
            }
        });
        
        // Clean up when page is unloaded
        window.addEventListener('beforeunload', function() {
            if (window.wsClient) {
                window.wsClient.removeListener(checkForNotifications);
            }
        });
    </script>
</body>
</html>