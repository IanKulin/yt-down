<%- include('partials/header', { currentPage: 'settings', pageTitle: 'Settings' }) %>
        
        <section class="settings-section">
            <h2>Download Settings</h2>
            
            <form id="settingsForm" data-auto-save="true">
                <fieldset class="settings-group">
                    <legend>Video Quality</legend>
                    <div class="form-group">
                        <label for="videoQuality">Maximum Resolution:</label>
                        <div id="videoQualityHelp" class="sr-only">Select the maximum video resolution for downloads. Higher resolutions may take longer to download.</div>
                        <select id="videoQuality" name="videoQuality" data-auto-save="true" aria-describedby="videoQualityHelp">
                            <% options.videoQualities.forEach(function(option) { %>
                                <option value="<%= option.value %>" <%= settings.videoQuality === option.value ? 'selected' : '' %>>
                                    <%= option.label %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </fieldset>
                
                <fieldset class="settings-group">
                    <legend>Subtitles</legend>
                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="subtitles" data-auto-save="true" <%= settings.subtitles ? 'checked' : '' %> aria-describedby="subtitlesHelp">
                            <span class="checkmark"></span>
                            Download subtitles
                        </label>
                        <div id="subtitlesHelp" class="sr-only">Enable to download subtitle files when available.</div>
                    </div>
                    
                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="autoSubs" data-auto-save="true" <%= settings.autoSubs ? 'checked' : '' %> aria-describedby="autoSubsHelp">
                            <span class="checkmark"></span>
                            Download auto-generated subtitles
                        </label>
                        <div id="autoSubsHelp" class="sr-only">Enable to download automatically generated subtitles when manual subtitles are not available.</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="subLanguage">Subtitle Language:</label>
                        <div id="subLanguageHelp" class="sr-only">Select the preferred language for subtitle downloads.</div>
                        <select id="subLanguage" name="subLanguage" data-auto-save="true" aria-describedby="subLanguageHelp">
                            <% options.subLanguages.forEach(function(option) { %>
                                <option value="<%= option.value %>" <%= settings.subLanguage === option.value ? 'selected' : '' %>>
                                    <%= option.label %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </fieldset>
                
                <fieldset class="settings-group">
                    <legend>Download Speed</legend>
                    <div class="form-group">
                        <label for="rateLimit">Rate Limit:</label>
                        <div id="rateLimitHelp" class="sr-only">Set a maximum download speed limit to prevent overwhelming your internet connection.</div>
                        <select id="rateLimit" name="rateLimit" data-auto-save="true" aria-describedby="rateLimitHelp">
                            <% options.rateLimits.forEach(function(option) { %>
                                <option value="<%= option.value %>" <%= settings.rateLimit === option.value ? 'selected' : '' %>>
                                    <%= option.label %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </fieldset>
                
                <div class="form-actions">
                    <!-- Auto-save feedback provided by field glow effect -->
                    <div id="settingsStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                </div>
            </form>
        </section>
        
        <%- include('partials/footer') %>
    </div>
    
    <script src="/js/websocket.js"></script>
    <script src="/js/utils.js"></script>
    <script src="/js/toast.js"></script>
    <script src="/js/notifications.js"></script>
    <script>
        // Auto-save functionality
        let saveTimeout;
        let isSaving = false;
        
        function debounceAutoSave(callback, delay) {
            clearTimeout(saveTimeout);
            saveTimeout = setTimeout(callback, delay);
        }
        
        function showSaveStatus(changedField, isError = false) {
            if (!changedField) return;
            
            // Remove any existing glow classes
            changedField.classList.remove('auto-save-glow', 'auto-save-error');
            
            // Add the appropriate glow class
            const glowClass = isError ? 'auto-save-error' : 'auto-save-glow';
            changedField.classList.add(glowClass);
            
            // Remove the glow class after animation completes
            setTimeout(() => {
                changedField.classList.remove(glowClass);
            }, 1500);
        }
        
        function getFormData() {
            const form = document.getElementById('settingsForm');
            const formData = new FormData(form);
            const data = {};
            
            data.videoQuality = formData.get('videoQuality');
            data.subtitles = formData.get('subtitles') === 'on';
            data.autoSubs = formData.get('autoSubs') === 'on';
            data.subLanguage = formData.get('subLanguage');
            data.rateLimit = formData.get('rateLimit');
            
            return data;
        }
        
        function saveSettings(changedField) {
            if (isSaving) return;
            
            isSaving = true;
            
            const data = getFormData();
            
            fetch('/api/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to save settings');
                }
                return response.json();
            })
            .then(result => {
                showSaveStatus(changedField, false);
                isSaving = false;
            })
            .catch(error => {
                console.error('Error saving settings:', error);
                showSaveStatus(changedField, true);
                isSaving = false;
            });
        }
        
        function initAutoSave() {
            const form = document.getElementById('settingsForm');
            const autoSaveFields = form.querySelectorAll('[data-auto-save="true"]');
            
            autoSaveFields.forEach(field => {
                field.addEventListener('change', function() {
                    const changedField = this;
                    debounceAutoSave(() => saveSettings(changedField), 300);
                });
            });
        }
        
        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            initAutoSave();
            
            // Initialize notification system
            window.notificationSystem.initialize();
        });
        
        // Clean up when page is unloaded
        window.addEventListener('beforeunload', function() {
            window.notificationSystem.cleanup();
        });
    </script>
</body>
</html>