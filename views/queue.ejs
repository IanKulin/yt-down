<%- include('partials/header', { currentPage: 'queue', pageTitle: 'Queue' }) %>
        
        <!-- Current Download Panel -->
        <div id="currentDownloadPanel" class="current-download-panel">
            <h2>Current Download</h2>
            <div class="download-info">
                <div class="download-filename" id="downloadFilename">No active download</div>
                <div class="download-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText">0%</div>
                </div>
                <div class="download-details">
                    <span class="download-speed" id="downloadSpeed">Speed: N/A</span>
                    <span class="download-eta" id="downloadEta">ETA: N/A</span>
                </div>
            </div>
        </div>
        
        <form action="/job/add" method="POST">
            <div class="form-group">
                <label for="url">Enter URL for download job:</label>
                <div class="form-input-group">
                    <input type="url" id="url" name="url" required placeholder="https://www.youtube.com/watch?v=..." autofocus>
                    <button type="submit">Add Job to Queue</button>
                </div>
            </div>
        </form>
        
        <div class="queue-section">
            <% const totalJobs = queuedJobs.length + activeJobs.length; %>
            <% if (totalJobs > 0) { %>
                <h2>Current Queue (<%= totalJobs === 1 ? '1 job' : totalJobs + ' jobs' %>)</h2>
            <% } else { %>
                <h2>Current Queue</h2>
            <% } %>
            
            <div class="queue-container">
                <% if (queuedJobs.length === 0 && activeJobs.length === 0) { %>
                    <div class="empty-queue">No download jobs in queue</div>
                <% } else { %>
                    <!-- Active Downloads -->
                    <% activeJobs.forEach(function(item) { %>
                        <div class="queue-item active" data-hash="<%= item.hash %>">
                            <div class="queue-item-content">
                                <div class="url"><%= item.url %></div>
                                <div class="hash">Hash: <%= item.hash %></div>
                                <div class="status downloading">Downloading...</div>
                            </div>
                            <button class="delete-btn" data-hash="<%= item.hash %>" data-url="<%= item.url %>" data-status="active">
                                Cancel
                            </button>
                        </div>
                    <% }) %>
                    
                    <!-- Queued Downloads -->
                    <% queuedJobs.forEach(function(item) { %>
                        <div class="queue-item" data-hash="<%= item.hash %>">
                            <div class="queue-item-content">
                                <div class="url"><%= item.url %></div>
                                <div class="hash">Hash: <%= item.hash %></div>
                                <div class="status queued">Waiting...</div>
                            </div>
                            <button class="delete-btn" data-hash="<%= item.hash %>" data-url="<%= item.url %>" data-status="queued">
                                Delete
                            </button>
                        </div>
                    <% }) %>
                <% } %>
            </div>
        </div>
        
        <%- include('partials/footer') %>
    </div>
    
    <!-- Delete/Cancel Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay">
        <div class="modal">
            <h3 id="modalTitle">Confirm Delete</h3>
            <p id="modalMessage">Are you sure you want to delete this download job from the queue?</p>
            <div id="modalUrl" class="modal-url"></div>
            <div class="modal-buttons">
                <button class="modal-btn btn-cancel" id="modalCancelBtn" onclick="hideDeleteModal()">Cancel</button>
                <button class="modal-btn btn-delete" id="modalConfirmBtn" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>
    
    <!-- Hidden form for delete submission -->
    <form id="deleteForm" action="/job/delete" method="POST" style="display: none;">
        <input type="hidden" id="deleteHash" name="hash" value="">
    </form>
    
    <script src="/js/websocket.js"></script>
    <script>
        let currentDeleteHash = null;
        
        // Event delegation for delete buttons
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('click', function(e) {
                if (e.target && e.target.classList.contains('delete-btn')) {
                    const hash = e.target.dataset.hash;
                    const url = e.target.dataset.url;
                    const status = e.target.dataset.status;
                    showDeleteModal(hash, url, status);
                }
            });
        });
        
        function showDeleteModal(hash, url, status) {
            currentDeleteHash = hash;
            document.getElementById('modalUrl').textContent = url;
            
            // Update modal content based on job status
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            const cancelBtn = document.getElementById('modalCancelBtn');
            const confirmBtn = document.getElementById('modalConfirmBtn');
            
            if (status === 'active') {
                modalTitle.textContent = 'Cancel Download';
                modalMessage.textContent = 'You\'re about to cancel this download. It will be stopped and removed from the queue.';
                cancelBtn.textContent = 'Keep Downloading';
                cancelBtn.className = 'modal-btn btn-cancel';
                confirmBtn.textContent = 'Cancel Download';
                confirmBtn.className = 'modal-btn btn-cancel-download';
            } else {
                modalTitle.textContent = 'Confirm Delete';
                modalMessage.textContent = 'Are you sure you want to delete this download job from the queue?';
                cancelBtn.textContent = 'Cancel';
                cancelBtn.className = 'modal-btn btn-cancel';
                confirmBtn.textContent = 'Delete';
                confirmBtn.className = 'modal-btn btn-delete';
            }
            
            document.getElementById('deleteModal').style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        }
        
        function hideDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            currentDeleteHash = null;
        }
        
        function confirmDelete() {
            if (currentDeleteHash) {
                document.getElementById('deleteHash').value = currentDeleteHash;
                document.getElementById('deleteForm').submit();
            }
        }
        
        // Close modal when clicking outside of it
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideDeleteModal();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('deleteModal').style.display === 'block') {
                hideDeleteModal();
            }
        });
        
        // Current download panel management
        let updateInterval;
        
        // Error state tracking
        let isShowingConnectionError = false;
        let lastConnectionState = true; // Assume connected initially
        let connectionErrorToastId = null;
        
        function updateCurrentDownload() {
            fetch('/api/state')
                .then(response => response.json())
                .then(data => {
                    // Mark connection as successful
                    updateConnectionState(true);
                    
                    const currentDownloads = data.processor.currentDownloads;
                    const panel = document.getElementById('currentDownloadPanel');
                    
                    if (currentDownloads && currentDownloads.length > 0) {
                        // Get the first (and usually only) active download
                        const download = currentDownloads[0];
                        
                        // Update filename
                        const filename = download.filename || 'Preparing download...';
                        document.getElementById('downloadFilename').textContent = filename;
                        
                        // Update progress bar and text
                        const percentage = download.percentage || 0;
                        document.getElementById('progressFill').style.width = percentage + '%';
                        document.getElementById('progressText').textContent = percentage.toFixed(1) + '%';
                        
                        // Update speed and ETA
                        const speed = download.speed || 'N/A';
                        const eta = download.eta || 'N/A';
                        document.getElementById('downloadSpeed').textContent = 'Speed: ' + speed;
                        document.getElementById('downloadEta').textContent = 'ETA: ' + eta;
                    } else {
                        // Reset to default state
                        document.getElementById('downloadFilename').textContent = 'No active download';
                        document.getElementById('progressFill').style.width = '0%';
                        document.getElementById('progressText').textContent = '0%';
                        document.getElementById('downloadSpeed').textContent = 'Speed: N/A';
                        document.getElementById('downloadEta').textContent = 'ETA: N/A';
                    }
                    
                    // Update queue list in real-time
                    updateQueueList(data.queued || [], data.active || []);
                    
                    // Check for completion notifications
                    if (data.notifications && data.notifications.length > 0) {
                        const notification = data.notifications[0];
                        // Only show if we haven't shown this notification before
                        if (!shownNotifications.has(notification.timestamp)) {
                            shownNotifications.add(notification.timestamp);
                            showCompletionNotification(notification);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching download status:', error);
                    updateConnectionState(false);
                });
        }
        
        function updateQueueList(queuedJobs, activeJobs) {
            const queueSection = document.querySelector('.queue-section');
            if (!queueSection) return;
            
            // Update queue count
            const queueCountElement = queueSection.querySelector('h2');
            const totalCount = queuedJobs.length + activeJobs.length;
            if (totalCount > 0) {
                queueCountElement.textContent = `Current Queue (${totalCount === 1 ? '1 job' : totalCount + ' jobs'})`;
            } else {
                queueCountElement.textContent = 'Current Queue';
            }
            
            // Find or create the queue container
            let queueContainer = queueSection.querySelector('.queue-container');
            if (!queueContainer) {
                // Create container if it doesn't exist
                queueContainer = document.createElement('div');
                queueContainer.className = 'queue-container';
                queueSection.appendChild(queueContainer);
            }
            
            // Clear existing items
            queueContainer.innerHTML = '';
            
            // Show empty state if no items
            if (totalCount === 0) {
                const emptyDiv = document.createElement('div');
                emptyDiv.className = 'empty-queue';
                emptyDiv.textContent = 'No download jobs in queue';
                queueContainer.appendChild(emptyDiv);
                return;
            }
            
            // Add active downloads first
            activeJobs.forEach(item => {
                const queueItem = createQueueItem(item, 'active', 'Downloading...');
                queueContainer.appendChild(queueItem);
            });
            
            // Add queued downloads
            queuedJobs.forEach(item => {
                const queueItem = createQueueItem(item, 'queued', 'Waiting...');
                queueContainer.appendChild(queueItem);
            });
        }
        
        function createQueueItem(item, status, statusText) {
            const queueItem = document.createElement('div');
            queueItem.className = status === 'active' ? 'queue-item active' : 'queue-item';
            queueItem.dataset.hash = item.hash;
            
            queueItem.innerHTML = `
                <div class="queue-item-content">
                    <div class="url">${escapeHtml(item.url)}</div>
                    <div class="hash">Hash: ${escapeHtml(item.hash)}</div>
                    <div class="status ${status}">${statusText}</div>
                </div>
                <button class="delete-btn" data-hash="${escapeHtml(item.hash)}" data-url="${escapeHtml(item.url)}" data-status="${status}">
                    ${status === 'active' ? 'Cancel' : 'Delete'}
                </button>
            `;
            
            return queueItem;
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        function showApiError(message) {
            showToast('error', message, 10000);
        }
        
        function updateConnectionState(isConnected) {
            const wasConnected = lastConnectionState;
            lastConnectionState = isConnected;
            
            if (!isConnected && wasConnected) {
                // Transitioned from connected to disconnected
                showConnectionError();
            } else if (isConnected && !wasConnected) {
                // Transitioned from disconnected to connected
                clearConnectionError();
            }
        }
        
        function showConnectionError() {
            if (isShowingConnectionError) return;
            
            isShowingConnectionError = true;
            connectionErrorToastId = showToast(
                'error', 
                'Connection lost. Attempting to reconnect...', 
                0 // Persistent until cleared
            );
        }
        
        function clearConnectionError() {
            if (!isShowingConnectionError) return;
            
            isShowingConnectionError = false;
            if (connectionErrorToastId) {
                dismissToastById(connectionErrorToastId);
                connectionErrorToastId = null;
            }
            
            // Show brief success notification
            showToast('success', 'Connection restored', 3000);
        }
        
        function showCompletionNotification(notification) {
            showToast('success', notification.message, 5000, notification.timestamp);
        }
        
        // Toast notification system
        let toastQueue = [];
        let toastIdCounter = 0;
        let shownNotifications = new Set();
        
        function showToast(type, message, duration = 5000, notificationId = null) {
            const toast = {
                id: ++toastIdCounter,
                type: type,
                message: message,
                duration: duration,
                notificationId: notificationId,
                element: null,
                timeout: null,
                progressInterval: null,
                isHovered: false
            };
            
            toastQueue.push(toast);
            displayToast(toast);
            return toast.id;
        }
        
        function displayToast(toast) {
            const container = document.getElementById('toast-container');
            if (!container) return;
            
            // Create toast element
            const toastElement = document.createElement('div');
            toastElement.className = `toast-notification ${toast.type}`;
            toastElement.dataset.toastId = toast.id;
            toastElement.innerHTML = `
                <span class="toast-content">${escapeHtml(toast.message)}</span>
                <button class="toast-dismiss" aria-label="Dismiss notification">&times;</button>
                <div class="toast-progress"></div>
            `;
            
            toast.element = toastElement;
            container.appendChild(toastElement);
            
            // Set up dismiss functionality
            const dismissBtn = toastElement.querySelector('.toast-dismiss');
            dismissBtn.addEventListener('click', () => dismissToast(toast));
            
            // Set up hover pause functionality
            toastElement.addEventListener('mouseenter', () => {
                toast.isHovered = true;
                toastElement.classList.add('paused');
                if (toast.timeout) clearTimeout(toast.timeout);
                if (toast.progressInterval) clearInterval(toast.progressInterval);
            });
            
            toastElement.addEventListener('mouseleave', () => {
                toast.isHovered = false;
                toastElement.classList.remove('paused');
                startToastTimer(toast);
            });
            
            // Start auto-dismiss timer
            startToastTimer(toast);
        }
        
        function startToastTimer(toast) {
            if (toast.isHovered || toast.duration === 0) return;
            
            const progressBar = toast.element.querySelector('.toast-progress');
            let progress = 0;
            const interval = 50;
            const increment = (interval / toast.duration) * 100;
            
            toast.progressInterval = setInterval(() => {
                progress += increment;
                progressBar.style.width = progress + '%';
                
                if (progress >= 100) {
                    clearInterval(toast.progressInterval);
                    dismissToast(toast);
                }
            }, interval);
        }
        
        function dismissToast(toast) {
            if (!toast.element || toast.element.classList.contains('dismissing')) return;
            
            // Clear timers
            if (toast.timeout) clearTimeout(toast.timeout);
            if (toast.progressInterval) clearInterval(toast.progressInterval);
            
            // Animate out
            toast.element.classList.add('dismissing');
            setTimeout(() => {
                if (toast.element.parentElement) {
                    toast.element.parentElement.removeChild(toast.element);
                }
            }, 300);
            
            // Remove from queue
            const index = toastQueue.indexOf(toast);
            if (index > -1) {
                toastQueue.splice(index, 1);
            }
            
            // Tell server to remove the notification if it has a notification ID
            if (toast.notificationId) {
                // Remove from shown notifications set
                shownNotifications.delete(toast.notificationId);
                
                fetch('/api/notifications/dismiss', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ notificationId: toast.notificationId })
                }).catch(error => {
                    console.error('Error dismissing notification:', error);
                });
            }
        }
        
        function dismissToastById(toastId) {
            const toast = toastQueue.find(t => t.id === toastId);
            if (toast) {
                dismissToast(toast);
            }
        }
        
        // Start updating current download status
        document.addEventListener('DOMContentLoaded', function() {
            // Initial update
            updateCurrentDownload();
            
            // Set up WebSocket-triggered updates with retry
            function setupWebSocketUpdates() {
                if (window.wsClient) {
                    console.log('WebSocket client available, setting up real-time updates');
                    window.wsClient.addListener(updateCurrentDownload);
                    
                    // Listen for connection state changes
                    window.wsClient.addConnectionListener((isConnected) => {
                        updateConnectionState(isConnected);
                    });
                } else {
                    // Retry in a moment if WebSocket client is still loading
                    setTimeout(() => {
                        if (window.wsClient) {
                            console.log('WebSocket client loaded, setting up real-time updates');
                            window.wsClient.addListener(updateCurrentDownload);
                            
                            // Listen for connection state changes
                            window.wsClient.addConnectionListener((isConnected) => {
                                updateConnectionState(isConnected);
                            });
                        } else {
                            // Fallback to polling if WebSocket client is not available
                            console.warn('WebSocket client not available, falling back to polling');
                            updateInterval = setInterval(updateCurrentDownload, 2000);
                        }
                    }, 100);
                }
            }
            
            setupWebSocketUpdates();
        });
        
        // Clean up when page is unloaded
        window.addEventListener('beforeunload', function() {
            if (updateInterval) {
                clearInterval(updateInterval);
            }
            if (window.wsClient) {
                window.wsClient.removeListener(updateCurrentDownload);
            }
        });
    </script>
</body>
</html>