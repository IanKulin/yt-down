<%- include('partials/header', { currentPage: 'queue', pageTitle: 'Queue' }) %>
        
        <form action="/url/add" method="POST">
            <div class="form-group">
                <label for="url">Enter URL to download:</label>
                <input type="url" id="url" name="url" required placeholder="https://www.youtube.com/watch?v=...">
            </div>
            <button type="submit">Add to Queue</button>
        </form>
        
        <!-- Current Download Panel -->
        <div id="currentDownloadPanel" class="current-download-panel" style="display: none;">
            <h2>Current Download</h2>
            <div class="download-info">
                <div class="download-filename" id="downloadFilename"></div>
                <div class="download-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="progress-text" id="progressText"></div>
                </div>
                <div class="download-details">
                    <span class="download-speed" id="downloadSpeed"></span>
                    <span class="download-eta" id="downloadEta"></span>
                </div>
            </div>
        </div>
        
        <div class="queue-section">
            <h2>Current Queue (<%= queuedUrls.length + activeUrls.length %> items)</h2>
            
            <% if (queuedUrls.length === 0 && activeUrls.length === 0) { %>
                <div class="empty-queue">No URLs in queue</div>
            <% } else { %>
                <!-- Active Downloads -->
                <% activeUrls.forEach(function(item) { %>
                    <div class="queue-item active">
                        <div class="queue-item-content">
                            <div class="url"><%= item.url %></div>
                            <div class="hash">Hash: <%= item.hash %></div>
                            <div class="status downloading">Downloading...</div>
                        </div>
                        <button class="delete-btn" data-hash="<%= item.hash %>" data-url="<%= item.url %>">
                            Delete
                        </button>
                    </div>
                <% }) %>
                
                <!-- Queued Downloads -->
                <% queuedUrls.forEach(function(item) { %>
                    <div class="queue-item">
                        <div class="queue-item-content">
                            <div class="url"><%= item.url %></div>
                            <div class="hash">Hash: <%= item.hash %></div>
                            <div class="status queued">Waiting...</div>
                        </div>
                        <button class="delete-btn" data-hash="<%= item.hash %>" data-url="<%= item.url %>">
                            Delete
                        </button>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay">
        <div class="modal">
            <h3>Confirm Delete</h3>
            <p>Are you sure you want to delete this URL from the queue?</p>
            <div id="modalUrl" class="modal-url"></div>
            <div class="modal-buttons">
                <button class="modal-btn btn-cancel" onclick="hideDeleteModal()">Cancel</button>
                <button class="modal-btn btn-delete" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>
    
    <!-- Hidden form for delete submission -->
    <form id="deleteForm" action="/url/delete" method="POST" style="display: none;">
        <input type="hidden" id="deleteHash" name="hash" value="">
    </form>
    
    <script>
        let currentDeleteHash = null;
        
        // Event delegation for delete buttons
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('click', function(e) {
                if (e.target && e.target.classList.contains('delete-btn')) {
                    const hash = e.target.dataset.hash;
                    const url = e.target.dataset.url;
                    showDeleteModal(hash, url);
                }
            });
        });
        
        function showDeleteModal(hash, url) {
            currentDeleteHash = hash;
            document.getElementById('modalUrl').textContent = url;
            document.getElementById('deleteModal').style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
        }
        
        function hideDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            currentDeleteHash = null;
        }
        
        function confirmDelete() {
            if (currentDeleteHash) {
                document.getElementById('deleteHash').value = currentDeleteHash;
                document.getElementById('deleteForm').submit();
            }
        }
        
        // Close modal when clicking outside of it
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideDeleteModal();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('deleteModal').style.display === 'block') {
                hideDeleteModal();
            }
        });
        
        // Current download panel management
        let updateInterval;
        
        function updateCurrentDownload() {
            fetch('/api/state')
                .then(response => response.json())
                .then(data => {
                    const currentDownloads = data.processor.currentDownloads;
                    const panel = document.getElementById('currentDownloadPanel');
                    
                    if (currentDownloads && currentDownloads.length > 0) {
                        // Show the panel
                        panel.style.display = 'block';
                        
                        // Get the first (and usually only) active download
                        const download = currentDownloads[0];
                        
                        // Update filename
                        const filename = download.filename || 'Preparing download...';
                        document.getElementById('downloadFilename').textContent = filename;
                        
                        // Update progress bar and text
                        const percentage = download.percentage || 0;
                        document.getElementById('progressFill').style.width = percentage + '%';
                        document.getElementById('progressText').textContent = percentage.toFixed(1) + '%';
                        
                        // Update speed and ETA
                        const speed = download.speed || 'N/A';
                        const eta = download.eta || 'N/A';
                        document.getElementById('downloadSpeed').textContent = speed;
                        document.getElementById('downloadEta').textContent = eta;
                    } else {
                        // Hide the panel
                        panel.style.display = 'none';
                    }
                    
                    // Check for completion notifications
                    if (data.notifications && data.notifications.length > 0) {
                        showCompletionNotification(data.notifications[0]);
                    }
                })
                .catch(error => {
                    console.error('Error fetching download status:', error);
                });
        }
        
        function showCompletionNotification(notification) {
            // Create notification element dynamically
            const existingFlash = document.querySelector('[data-flash-message]');
            if (existingFlash) {
                // Don't show if there's already a flash message visible
                return;
            }
            
            const flashMessage = document.createElement('div');
            flashMessage.className = 'flash-message success';
            flashMessage.setAttribute('data-flash-message', '');
            flashMessage.innerHTML = `
                <span class="flash-content">${notification.message}</span>
                <button class="flash-dismiss" aria-label="Dismiss message">&times;</button>
            `;
            
            // Insert after the header
            const header = document.querySelector('.header');
            header.parentNode.insertBefore(flashMessage, header.nextSibling);
            
            // Set up dismiss functionality
            const dismissBtn = flashMessage.querySelector('.flash-dismiss');
            dismissBtn.addEventListener('click', function() {
                dismissCompletionNotification(notification.timestamp, flashMessage);
            });
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                dismissCompletionNotification(notification.timestamp, flashMessage);
            }, 5000);
            
            // Handle escape key
            const escapeHandler = function(e) {
                if (e.key === 'Escape') {
                    dismissCompletionNotification(notification.timestamp, flashMessage);
                    document.removeEventListener('keydown', escapeHandler);
                }
            };
            document.addEventListener('keydown', escapeHandler);
        }
        
        function dismissCompletionNotification(notificationId, flashElement) {
            if (!flashElement || flashElement.classList.contains('dismissing')) return;
            
            // Animate out
            flashElement.classList.add('dismissing');
            setTimeout(() => {
                if (flashElement.parentElement) {
                    flashElement.parentElement.removeChild(flashElement);
                }
            }, 300);
            
            // Tell server to remove the notification
            fetch('/api/notifications/dismiss', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ notificationId: notificationId })
            }).catch(error => {
                console.error('Error dismissing notification:', error);
            });
        }
        
        // Start updating current download status
        document.addEventListener('DOMContentLoaded', function() {
            updateCurrentDownload();
            updateInterval = setInterval(updateCurrentDownload, 2000); // Update every 2 seconds
        });
        
        // Clean up interval when page is unloaded
        window.addEventListener('beforeunload', function() {
            if (updateInterval) {
                clearInterval(updateInterval);
            }
        });
    </script>
</body>
</html>